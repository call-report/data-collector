name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7

  publish-testpypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'testpypi'
    environment: testpypi
    permissions:
      id-token: write
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'release' && github.event.action == 'published') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'pypi')
    environment: pypi
    permissions:
      id-token: write
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  verify-installation:
    needs: [publish-testpypi, publish-pypi]
    runs-on: ubuntu-latest
    if: always() && (needs.publish-testpypi.result == 'success' || needs.publish-pypi.result == 'success')
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Test TestPyPI installation
      if: needs.publish-testpypi.result == 'success'
      run: |
        echo "Testing installation from TestPyPI..."
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ ffiec-data-collector
        python -c "import ffiec_data_collector; print(f'Version: {ffiec_data_collector.__version__}')"
    
    - name: Test PyPI installation
      if: needs.publish-pypi.result == 'success'
      run: |
        echo "Testing installation from PyPI..."
        pip install ffiec-data-collector
        python -c "import ffiec_data_collector; print(f'Version: {ffiec_data_collector.__version__}')"